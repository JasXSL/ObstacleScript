// Name the script #Tools
/*
	Handles:
	- Van opening/closing
	- What tools are held by what players
	- Spawning tools
	- Motion sensors and communciation with the sensor board
	- 
	
	
	Required globals:
	#define DOOR_START_ROT (rot)local - Local rotation of the van doors in closed rotation
	
	
*/
#include "ObstacleScript/helpers/Ghost/GhostHelper.lsb"
#define USE_STATE_ENTRY
#define USE_TIMER
#include "ObstacleScript/index.lsl"

// use table idbTable$TOOLS. Not indexed, it instead uses idbTable$TOOLS+(str)assetUUID. Each row is a JSON array: int type, key heldBy, var data
#define TOOL_TYPE 0
#define TOOL_HELDBY 1
#define TOOL_DATA 2

// Get linksetdata keys starting with idbTable$TOOLS followed by exactly 36 characters
#define getToolTableKeys() llLinksetDataFindKeys(idbTable$TOOLS+".{36}", 0, -1)
#define forTool(...) OVERLOAD(forTool, __VA_ARGS__)
#define forTool2(index, tool) list _k = getToolTableKeys(); integer index; for(; index < count(_k); ++index ){ str tool = llLinksetDataRead(l2s(_k,index));
#define forTool3(index, uuid, tool) forTool2(index, tool) key uuid = llGetSubString(l2s(_k, index), 1,-1);

// Gear is a 2-stride int list of (int)toolIndex, (int)amount
// ToolIndex is defined in GhostHelper.lsl
spawnGear( list gear ){
    
    integer P_TABLE;
    integer P_SIDE;
    forLink( ln, name )
        if( name == "MAIN_EQUIP" )
            P_TABLE = ln;
        else if( name == "SIDE_EQUIP" )
            P_SIDE = ln;
    end
    if( !P_TABLE )
        qd("Error: Main gear table not found!");
    if( !P_SIDE )
        qd("Error: Side equipment table not found");

    // tool, spacing, name, rotation, shelf (0 = main, 0=main, 1=main bottom, 2=custom shelf mid, 3 = custom shelf top, 4 = custom shelf bottom)
    #define GSSTRIDE 5
    list GSIZE = [
        ToolsetConst$types$ghost$owometer, 
            0.11, "Owometer", ZERO_ROTATION, 0,
        ToolsetConst$types$ghost$hots, 
            0.25, "HOTS", ZERO_ROTATION, 1,
        ToolsetConst$types$ghost$flashlight, 
            0.1, "Flashlight", ZERO_ROTATION, 0,
        ToolsetConst$types$ghost$spiritbox, 
            0.15, "Spiritbox", ZERO_ROTATION, 0,
        ToolsetConst$types$ghost$ecchisketch, 
            0.2, "Ecchisketch", llEuler2Rot(<0,0,PI_BY_TWO>), 1,
        ToolsetConst$types$ghost$thermometer, 
            0.1, "Thermometer", llEuler2Rot(<0,0,-PI_BY_TWO>), 0,
            
        ToolsetConst$types$ghost$salt, 
            0.15, "Salt", llEuler2Rot(<0,0,PI_BY_TWO>), 2,
        ToolsetConst$types$ghost$vape, 
            0.1, "Vape", 0, 2,
        ToolsetConst$types$ghost$parabolic, 
            0.55, "Parabolic", 0, 4,
        ToolsetConst$types$ghost$hornybat, 
            0.3, "HornyBat", llEuler2Rot(<0,0,-PI/4*.8>), 4,
        ToolsetConst$types$ghost$motionDetector, 
            0.15, "MotionDetector", 0, 3,
        ToolsetConst$types$ghost$pills, 
            0.15, "Pills", llEuler2Rot(<0,0,PI_BY_TWO>), 2,
        ToolsetConst$types$ghost$glowstick, 
            0.07, "Glowstick", 0, 3,
        ToolsetConst$types$ghost$videoCamera, 
            0.2, "VidCam", 0, 3
    ];
    
    
    #define findInGsize( toolType ) llListFindList(llList2ListStrided(GSIZE, 0, -1, GSSTRIDE), (list)toolType)*GSSTRIDE
    
    list totalWidth = [
        0,0,0,0,0
    ];
    // Measure width
    integer i;
    for(; i < count(gear); i += 2 ){
        
        integer type = l2i(gear, i);
        integer amount = l2i(gear, i+1);
        integer pos = findInGsize(type);
        float scale = l2f(GSIZE, pos+1);
        int shelf = l2i(GSIZE, pos+4);
        
        float tw = l2f(totalWidth, shelf);
        tw += scale*amount;
        totalWidth = llListReplaceList(totalWidth, (list)tw, shelf, shelf);
        
    }
        
    integer shelf;
    for( ; shelf < count(totalWidth); ++shelf ){
    
        list data = llGetLinkPrimitiveParams(P_TABLE, (list)PRIM_POSITION + PRIM_ROTATION);
        vector basePos = l2v(data, 0);
        rotation baseRot = l2r(data, 1);
        vector offs = <0,-.15,.44>;
        if( shelf == 1 )
            offs.z = -.14;
        
        if( shelf > 1 ){
            data = llGetLinkPrimitiveParams(P_SIDE, (list)PRIM_POSITION + PRIM_ROTATION);
            basePos = l2v(data, 0);
            baseRot = l2r(data, 1);
            offs = <0,-.1,0.124>;
            if( shelf == 3 )
                offs = <0,-.2,0.815>;
            else if( shelf == 4 )
                offs = <0,-.2,-0.57>;
            
        }
    
        float tw = l2f(totalWidth, shelf) / 2;
        
        list batch;
        
        float xPos;
        // Spawn
        integer n;
        for( i = 0; i < count(gear); i += 2 ){

            integer x;
            integer type = l2i(gear, i);
            integer amount = l2i(gear, i+1);
            integer pos = findInGsize(type);
            integer sh = l2i(GSIZE, pos+4);
            
            if( shelf == sh ){
                
                float scale = l2f(GSIZE, pos+1);
                string name = l2s(GSIZE, pos+2);
                rotation r = l2r(GSIZE, pos+3);
                for(; x < amount; ++x ){
                    
                    vector offs = <-tw+xPos+scale/2, 0, 0>+offs;
                    xPos += scale;
                    offs *= baseRot;
                    offs += basePos;
                    
                    //qd(name + offs);
                    ++n;
                    
                    list data = [
                        name, 
                        offs, 
                        (r*llEuler2Rot(<0,0,PI_BY_TWO>)*baseRot), 
                        "",             // Desc
                        "",             // Group
                        TRUE            // Live
                    ];
                    batch += mkarr(data);
                    if( count(batch) > 10 ){
                        
                        Rezzer$rezMulti(LINK_THIS, batch);
                        batch = [];
                        
                    }
                    
                }
            
            }
        
        }
        
        if( count(batch) )
            Rezzer$rezMulti(LINK_THIS, batch);
        
    }
    
    
}

destroyTool( key worldID ){

	str table = idbTable$TOOLS+(str)worldID;
	str data = llLinksetDataRead(table);
	if( data == "" ){
		qd("Tool to destroy not found");
		return;
	}
	
	key holder = j(data, TOOL_HELDBY);
	if( holder )
		ToolSet$remTool( holder, worldID );
	
	Portal$kill(worldID);
	llLinksetDataDelete(table);
		
}

integer numToolsHeldBy( key id ){
    
    integer out;
	forTool(i, tool)
        if( j(tool, TOOL_HELDBY) == id )
            ++out;
    end
    return out;
    
}

// Returns keys of sensors that are ON
list getActiveSensors(){
    
    list out;
    forTool( index, uuid, tool )
		
		if( 
            // Is a motion detector
            (int)j(tool, TOOL_TYPE) == ToolsetConst$types$ghost$motionDetector &&
            // Not held
            j(tool, TOOL_HELDBY) == "" &&
            // Active
            (int)j(tool, TOOL_DATA)
        )out += uuid;
		
	end
    return out;
    
}

#define updateSensors()\
    raiseEvent(0, "SEN_NAMES" + getActiveSensors())



// Toggles truck doors
int P_DR;  // Door right
int P_DL;  // Door left
float doorPerc;
int doorOpen = TRUE;
toggleDoors( integer open ){
    
    if( doorOpen != open ){
        
        if( !open )
            llTriggerSound("160a1e67-a56b-748b-1b77-2f915de2a991", 1);
        else
            llTriggerSound("f72f7248-8717-6b21-560d-4746025705f4", 1);
        
        doorOpen = open;
    }
    
    unsetTimer("DO");
    forLink( nr, name )
        if( name == "DOOR_R" )
            P_DR = nr;
        else if( name == "DOOR_L" )
            P_DL = nr;
        else if( name == "TRUCK" ){
            
            //"WL$2c089a35-016d-4365-7370-15ac50a04ec7$$SS$ni$0.5"
            list desc = split(l2s(llGetLinkPrimitiveParams(nr, (list)PRIM_DESC), 0), "$$");
            integer i;
            for(; i < count(desc); ++i ){
                
                str sub = l2s(desc, i);
                if( llGetSubString(sub, 0, 2) == "SS$" ){
                    
                    list spl = split(sub, "$");
                    string ss = "ni";
                    if( !open )
                        ss = "206436bb-6afd-ce82-1ebf-34c55a1bfa16";
                    spl = llListReplaceList(spl, (list)ss, 1, 1);
                    desc = llListReplaceList(desc, (list)join(spl, "$"), i, i);
                    llSetLinkPrimitiveParamsFast(nr, (list)PRIM_DESC + join(desc, "$$"));
                    
                }
                
            }
            
        }
    end
        
    doorPerc = 0;
    if( !open ){
        
        llSetLinkPrimitiveParamsFast(P_DR, (list)
            PRIM_ROT_LOCAL + DOOR_START_ROT +
            PRIM_LINK_TARGET + P_DL +
            PRIM_ROT_LOCAL + DOOR_START_ROT
        );
        
        return;
    }
    
    setInterval("DO",0.05);
    
}

dropTool( key obj, key worldID, vector tPos, rotation tRot ){
      
    key player = llGetOwnerKey(obj);
	string table = idbTable$TOOLS+(str)worldID;
	string tool = llLinksetDataRead(table);
	
    if( tool == "" ){
        qd("Dropped tool not found");
        return;
    }
	
    if( j(tool, TOOL_HELDBY) != player ){
		// Todo: Should probably force refresh target toolset
        qd("Invalid owner for drop of " + llKey2Name(obj) + obj);
        return;
    }
    
    //qd("Successful drop for " + worldID + "held by" + obj);
    int type = (int)j(tool, TOOL_TYPE);
    tool = llJsonSetValue(tool, (list)TOOL_HELDBY, "");
	llLinksetDataWrite(table, tool);
	
	GhostTool$dropped(worldID, tPos, tRot, j(tool, TOOL_DATA) );
    ToolSet$remTool( obj, worldID );
    updateSensors();    // Updates sensor names
    
    if( type == ToolsetConst$types$ghost$videoCamera )
        raiseEvent(0, "CAM" + worldID + TRUE);
    

}






#include "ObstacleScript/begin.lsl"

onLevelCustomGtoolSpawned( tool )

    list toolNames = (list)
        "Owometer" + ToolsetConst$types$ghost$owometer +
        "Flashlight" + ToolsetConst$types$ghost$flashlight +
        "HOTS" + ToolsetConst$types$ghost$hots +
        "Ecchisketch" + ToolsetConst$types$ghost$ecchisketch +
        "Spiritbox" + ToolsetConst$types$ghost$spiritbox +
        "Camera" + ToolsetConst$types$ghost$camera +
        "Salt" + ToolsetConst$types$ghost$salt +
        "Candle" + ToolsetConst$types$ghost$candle +
        "Parabolic" + ToolsetConst$types$ghost$parabolic +
        "MotionDetector" + ToolsetConst$types$ghost$motionDetector +
        "Glowstick" + ToolsetConst$types$ghost$glowstick +
        "Pills" + ToolsetConst$types$ghost$pills +
        "Thermometer" + ToolsetConst$types$ghost$thermometer +
        "Weegieboard" + ToolsetConst$types$ghost$weegieboard +
        "Vape" + ToolsetConst$types$ghost$vape +
        "HornyBat" +ToolsetConst$types$ghost$hornybat +
        "SaltPile" + ToolsetConst$types$ghost$saltpile +
        "VidCam" + ToolsetConst$types$ghost$videoCamera
    ;
    
    integer pos = llListFindList(toolNames, (list)llKey2Name(tool));
    if( pos == -1 ){
        qd("Unknown tool spawned" + llKey2Name(tool));
        return;
    }
    
    integer tn = l2i(toolNames, pos+1);

	string table = idbTable$TOOLS+(str)tool;
	// This tool is already spawned
	if( llLinksetDataRead(table) != "" )
        return;

	llLinksetDataWrite(table, mkarr(tn + "" + 0));

end

handleTimer( "DO" )

    doorPerc += 0.05;
    if( doorPerc > 1 ){
        
        doorPerc = 1;
        unsetTimer("DO");
        
    }
    
    list pp;
    pp += (list)PRIM_ROT_LOCAL + (DOOR_START_ROT*llEuler2Rot(<0,0,-PI/2*1.2*doorPerc>));
    pp += (list)PRIM_LINK_TARGET + P_DL +
        PRIM_ROT_LOCAL + (DOOR_START_ROT*llEuler2Rot(<0,0,PI/2*1.2*doorPerc>));
    
    llSetLinkPrimitiveParamsFast(P_DR, pp);

end

onLevelCustomGtoolData( sender, tooluuid, data )
    
	str table = idbTable$TOOLS+(str)tooluuid;
	str tool = llLinksetDataRead(table);
    if( tool == "" ){
        qd("Trying to update data on unknown tool ID" + tooluuid);
        return;
    }
    
    if(
        (int)j(tool, TOOL_TYPE) == ToolsetConst$types$ghost$saltpile && 
        (int)data == 1
    ){
        // GHOST BEHAVIOR :: Yuri - Smudge when stepping through salt
        if( 
            GhostGet$type() == GhostConst$type$yuri && 
            !isHunting()
        ){
            Ghost$smudge(sender, true);
        }
		
		GhostAux$salt();
        
        if( hasWeakAffix(GhostGet$affixes(), ToolSetConst$affix$noEvidenceUntilSalted) )
            raiseEvent(0, "SALTED");
        
    }
    
	tool = llJsonSetValue(tool, (list)TOOL_DATA, data);
	llLinksetDataWrite(table, tool);
    
end

onLevelCustomToolsetVape()
	Ghost$smudge(argKey(0), false);
end

// If a player leaves, drop their stuff
onLevelPlayersChanged()
    
	list players = getPlayers();
	forTool(idx, uuid, tool)
		
		key t = j(tool, TOOL_HELDBY);
		if( t != "" && llListFindList(players, [(str)t]) == -1 )
            dropTool(t, uuid, ZERO_VECTOR, ZERO_ROTATION);
        
	end
    
end

onStateEntry() 
    
    toggleDoors(TRUE);
    doorPerc = 1.0; // Makes it instant
    #ifdef DEBUG_SPAWN_GEAR
    spawnGear(DEBUG_SPAWN_GEAR);
    #endif
	//qd(llGetFreeMemory());
		
end

// Player has requested their held tools
onLevelCustomToolsetGet( toolsetuuid )

    key ok = llGetOwnerKey(toolsetuuid);
	forTool( i, uuid, tool )
		
		if( j(tool, TOOL_HELDBY ) == ok )
            ToolSet$addTool( 
                toolsetuuid, 
                j(tool, TOOL_TYPE ), 
                j(tool, TOOL_DATA ), 
                uuid
            );
	
	end
    
end

onLevelCustomToolsetDestroy( worldID )
    destroyTool(worldID);
end

// Drop a tool
onLevelCustomToolsetDrop( obj, worldID, tPos, tRot )
    dropTool( obj, worldID, tPos, tRot);   
end

// Interacted with a tool (obstacle)
onLevelInteractStarted( obstacle, tPos )
    
	string table = idbTable$TOOLS+(str)obstacle;
	str tool = llLinksetDataRead(table);
    if( tool == "" )
        return;
        
    key holder = j(tool, TOOL_HELDBY );
    if( holder )
        return;
        
    key sender = llGetOwnerKey(SENDER_KEY);
    if( numToolsHeldBy(sender) >= 3 )
        return;
    
    int type = (int)j(tool, TOOL_TYPE);
    
    tool = llJsonSetValue(tool, (list)TOOL_HELDBY, sender);
	llLinksetDataWrite(table, tool);
	
    GhostTool$pickedUp( obstacle );
    ToolSet$addTool( 
        sender, 
        type, 
        j(tool, TOOL_DATA), 
        obstacle
    );
    
    if( type == ToolsetConst$types$ghost$videoCamera )
        raiseEvent(0, "CAM" + obstacle + FALSE);
    
    updateSensors();

end

onLevelCustomToolsetSalt( pos, rot )
    
    Rezzer$rez( 
        LINK_THIS, 
        "SaltPile", 
        pos, 
        rot, 
        "", 
        "TOOLS", 
        TRUE
    );
    
end

onLevelCustomGtoolGetGhost( sender ) 
    
    GhostTool$setGhostTarg( sender, (GhostGet$ghost()), GhostGet$affixes(), GhostGet$evidence(), GhostGet$difficulty() );

end


handleEvent( "#Nodes", 0 )
    
	// Third step of the hunt chain. Forwarding START_HUNT to GhostBehavior
	// Checks if the ghost is near a horny bat
    if( argStr(0) == "CTH" ){
        
        vector pos = prPos(GhostGet$ghost());
		
        // Check if ghost is near a horny bat
        forTool(i, id, tool)
			
            integer type = (int)j(tool, TOOL_TYPE);
			
            if( type == ToolsetConst$types$ghost$hornybat ){
                
                float dist = 3.5;
                // GHOST BEHAVIOR :: Succubus - Longer horny bat
                if( GhostGet$type() == GhostConst$type$succubus )
                    dist = 7.0;
				float d = llVecDist(prPos(id), pos);

                // Consume horny bat charge
                if( d < dist ){
                    
                    integer ch = (int)j(tool, TOOL_DATA)+1;
                    if( ch == 1 ){
                        
                        tool = llJsonSetValue(tool, (list)TOOL_DATA, (str)ch);
						llLinksetDataWrite(idbTable$TOOLS+(str)id, tool);
                        GhostTool$trigger( id, [] );
                        
                    }
                    else
                        destroyTool(id);
                    
                    
                    return;
                }
                
            }
            
        end
        
		
        raiseEvent(0, "START_HUNT"); 
        
    }
    
end

handleEvent( "#Game", 0 )
    
    if( argStr(0) == "START_GAME" ){
        
        toggleDoors(FALSE);
		list keys = getToolTableKeys();
		integer i;
		for(; i < count(keys); ++i )
			llLinksetDataDelete(l2s(keys, i));
                
    }
    else if( argStr(0) == "SPAWN_GEAR" ){
        
        int nrPlayers = numPlayers();
        if( nrPlayers < 1 )
            nrPlayers = 1;
        int pills = nrPlayers+1;
        if( pills > 4 )
            pills = 4;
            
        int two = 2;
        int three = 3;
        int four = 4;
        
        int affixes = GhostGet$affixes();
        integer weakAffix = getWeakAffix(affixes);
        integer strongAffix = getStrongAffix(affixes);
        int noDuplicates = strongAffix == ToolSetConst$affix$noDuplicates;
        if( noDuplicates )
            two = four = three = pills = nrPlayers = 1;
        
            

        list spawns = [
            // Default gear
            ToolsetConst$types$ghost$flashlight, nrPlayers,
            ToolsetConst$types$ghost$owometer, (1+(nrPlayers>1)),
            ToolsetConst$types$ghost$hots, two,
            ToolsetConst$types$ghost$ecchisketch, two,
            ToolsetConst$types$ghost$spiritbox, two,
            
            // Side gear
            ToolsetConst$types$ghost$salt, two,
            ToolsetConst$types$ghost$parabolic, 1,
            ToolsetConst$types$ghost$motionDetector, four,
            ToolsetConst$types$ghost$glowstick, (1+(nrPlayers>2)),
            ToolsetConst$types$ghost$videoCamera, two
        ];
        
        
        if( weakAffix != ToolSetConst$affix$noHornyBats )
            spawns += (list)ToolsetConst$types$ghost$hornybat + two;
        if( weakAffix != ToolSetConst$affix$noVapes )
            spawns += (list)ToolsetConst$types$ghost$vape + three;
        
        if( weakAffix != ToolSetConst$affix$noPills )
            spawns += (list)ToolsetConst$types$ghost$pills + pills;
        if( strongAffix != ToolSetConst$affix$noThermometer)
            spawns += (list)ToolsetConst$types$ghost$thermometer + (1+(nrPlayers>2));
        
        
        
        spawnGear(spawns);
                        
        Rezzer$cb( LINK_THIS, "TOOLS" );
        
        if( weakAffix == ToolSetConst$affix$fewerHidingSpots )
            Spawner$load( LINK_THIS, "CJ", TRUE, "" );
        
        forPlayer(t, i, targ)
            ToolSet$reset( targ );
        end
        
    }
    else if( argStr(0) == "ROUND_START" ){
        
        toggleDoors(TRUE);
		// Spawn weegie board
        if( llFrand(1.0) < 0.4 || (GhostGet$difficulty() > 2 && GhostGet$type() == GhostConst$type$imp) )
			Spawner$nFromGroup( LINK_THIS, 1, "OUIJA" );
			            
    }
    
    else if( argStr(0) == "RESET_TOOLS" ){
        
        key player = argKey(1);
		forTool(i, uuid, data)

            if( j(data, TOOL_HELDBY ) == player )
                dropTool( player, uuid, ZERO_VECTOR, ZERO_ROTATION );
        
        end
        
    }
    else if( argStr(0) == "END_GAME" ){
        toggleDoors(FALSE);
        setTimeout("RESET_DOOR", 5);
    }
    else if( argStr(0) == "DEBUG" ){
        
        // resetPlayerTools(llGetOwner());
        
    }
    
end


handleTimer( "RESET_DOOR" )
    toggleDoors(TRUE);
end

onLevelCustomMotiondetTrig( detector, perc, id )
    
    integer affix = hasStrongAffix(GhostGet$affixes(), ToolSetConst$affix$reqMotionSensor);
    // GHOST BEHAVIOR :: Jim - Chance not to trigger the truck detector
    if( 
        // Ignore if ghost requires motion sensor to start
        !affix && 
        GhostGet$type() == GhostConst$type$jim && 
        llFrand(1) < .75 
    )return;
    
    list active = getActiveSensors();
    integer pos = llListFindList(active, (list)detector);
    if( pos == -1 )
        return;
        
    GhostStatus$triggerSoundSensor( "*", pos, perc );
    if( affix && prRoot(id) == GhostGet$ghost() )
        raiseEvent(0, "REM_MOTION_AFFIX");

end

onGhostEvent( ghost, players, baseType, subType, dur )
    
    if( 
        baseType == GhostEventsConst$IT_LIGHTS && 
        subType == GhostEventsConst$ITL_ELECTRONICS &&
		dur > 0
    ){
	
		forTool(i, uuid, data)
        
			if( (int)j(data, TOOL_TYPE) == ToolsetConst$types$ghost$videoCamera )
                raiseEvent(0, "CAM" + uuid + FALSE);
            
        end
        
        
        
    }
    
end

#include "ObstacleScript/end.lsl"

