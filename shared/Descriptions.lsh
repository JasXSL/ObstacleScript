/*
	This framework uses xobj standard description definitions
	
	The description syntax is: Syntax: TASKID$VAR1$VAR2...$$TASKID$VAR1$VAR2...
	
	Example to show text Sit On and have RLV sit on it
	D$Sit on$$SO
	
*/

#define Desc$TASK_TELEPORT "T"			// (vec)pos_offset - Uses the supportcube to teleport to a pos offset relative to the object's position and rotation. Triggered on keydown.
#define Desc$TASK_DESC "D"				// (str)text - Text that shows on your HUD. Passive.
#define Desc$TASK_INTERACT "I"			// (bool)direct, (bool)toRoot - Sends an interact event to the level. Triggered on keydown AND keyup. If direct is TRUE, it's sent directly to the object instead through PortalCustomType$INTERACT
#define Desc$TASK_CLIMB "CL"			// (rot)rotation_offset, (str)anim_passive, (str)anim_active, (str)anim_active_down, (str)anim_dismount_top, (str)anim_dismount_bottom, (CSV)nodes, (float)climbspeed. Triggered on keydown.
#define Desc$TASK_WATER "WT"			// (vec)stream, (float)cyclone, (float)swimspeed_modifier, (str)windlight_preset. Passive.
#define Desc$TASK_SOUNDSPACE "SS"		// (str)name, (float)vol. Passive.
#define Desc$TASK_WL_PRESET "WL"		// (str)preset. Passive
#define Desc$TASK_FOOTSTEPS "tFS"		// (str)preset/(uuid)sound, Passive.
#define Desc$TASK_TRIGGER_SOUND "TS"	// (key)sound, (float)vol=1. Keydown
#define Desc$TASK_PLAY_SOUND "PS"		// (key)sound, (float)vol=1. Keydown.
#define Desc$TASK_SIT_ON "SI"			// Keydown.
#define Desc$TASK_RC_ONLY "RC"			// Meta task that tells the interact script to only allow targeting this with raycasts
#define Desc$TASK_DOOR_STAT "DO"		// Stores door state. 0 = closed, 1 = partially open, 2 = fully open
#define Desc$TASK_GHOST_INTERACTIVE "GI"	// (int)flags, (vec)push_dir - Used in ghost games to indicate that ghosts can interact with something
	#define DescConst$GI$auto_push 0x1				// Allow GhostInteractive to handle push
	#define DescConst$GI$auto_stains 0x2			// Sets alpha on any links with the name "STAINS"
#define Desc$TASK_LIGHT_SWITCH "LS"		// Stores light swtich state. 0 = off, 1 = on
#define Desc$TASK_PLAY_ANIM "A"			// (str)anim - Plays an animation
#define Desc$TASK_SOUND_LOOP "S"		// (key)uuid, (float)vol, (float)radius = infinite

// Game mode specific tasks
#define Desc$GHOST_POWERED "ghSND"		// When set, this sound will be toggled on/off when the breaker is turned on/off. This is cached on script load inside GhostLevelHelper, so reset or refresh scripts in the level when adding new meshes that involve this

// Legacy, consider using getDescTask instead since this will return [] if the type exists but has no data
// Fetches data for the first task of this type
/*
list _dtd( str _d, str _t ){

	list spl = split(_d, "$$");
	integer i;
	for(; i < count(spl); ++i ){
		
		list data = split(l2s(spl, i), "$");
		if( l2s(data, 0) == _t )
			return llDeleteSubList(data, 0, 0);
		
	}
	return [];
	
}
#define getDescTaskData( desc, type ) \
	_dtd(desc, type)
*/
	
list _dt( str _d, str _t ){

	list spl = split(_d, "$$");
	integer i;
	for(; i < count(spl); ++i ){
		
		list data = split(l2s(spl, i), "$");
		if( l2s(data, 0) == _t )
			return data;
		
	}
	return [];
	
}
// Fetches a task from desc, Returns [] if not set. Includes the type itself on index 0, ex: D$Hello! -> ["D", "Hello!"]
#define getDescTask( desc, type ) \
	_dt(desc, type)

// Fetches description for id, respects "ROOT"
string _fdsc( key id ){
	
	string out = prDesc(id);
	if( out == "ROOT" )
		out = prDesc(prRoot(id));
	return out;
	
}
#define fetchDesc( id ) \
	_fdsc(id)


// Automatically updates Desc$TASK_SOUND_LOOP for the link. Warning: Link MUST ONLY REFER TO ONE LINK. You cannot use LINK_SET, LINK_ALL_OTHERS
int _ulsl( int l ){
	
	list t = getDescTask(l2s(llGetLinkPrimitiveParams(l, (list)PRIM_DESC), 0), Desc$TASK_SOUND_LOOP);
	if( count(t) < 3 ) // Needs at least [Desc$TASK_SOUND_LOOP, (key)uuid, (float)volume]
		return FALSE;
	llLinkStopSound(l);
	llLinkSetSoundRadius(l, l2f(t, 3));
	llLinkPlaySound(l, l2k(t, 1), l2f(t, 2), SOUND_LOOP);
	return TRUE;
	
}
#define updateLinkSoundLoop(link) _ulsl(link)

// Should probably use an actual thing here
//#define getDescTaskData(desc, var, task) list var;{list split=llParseString2List(desc, ["$$"], []); list_shift_each(split, val, {list s = llParseString2List(val, ["$"], []);if(llList2String(s, 0) == task){var=llDeleteSubList(s,0,0); }}})



