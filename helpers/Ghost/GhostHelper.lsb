/* Note: When using this in #Game, include GameHelper first */
#ifndef __GHOSTHELPER
#define __GHOSTHELPER

// ToolSet.lsh tool types. Commented is the data, followed by call to either ToolSet$trigger or GhostToolMethod$trigger
#define ToolsetConst$types$ghost$owometer 1			// (bool)on
#define ToolsetConst$types$ghost$flashlight 2		// (bool)on
#define ToolsetConst$types$ghost$hots 3				// 0
#define ToolsetConst$types$ghost$ecchisketch 4		// (int)drawing
#define ToolsetConst$types$ghost$spiritbox 5		// (bool)on
#define ToolsetConst$types$ghost$camera 6			// (int)pics_taken
#define ToolsetConst$types$ghost$salt 7				// (int)charges_used
#define ToolsetConst$types$ghost$candle 8			// NOT USED IN GAME
#define ToolsetConst$types$ghost$parabolic 9		// (bool)on | ToolSet: pos
#define ToolsetConst$types$ghost$motionDetector 10	// 0 - NOTE: Can only be placed on linksets where the root prim has the word LEVEL somewhere in the description
#define ToolsetConst$types$ghost$glowstick 11		// (int)percent
#define ToolsetConst$types$ghost$pills 12			// 0
#define ToolsetConst$types$ghost$thermometer 13		// (bool)on
#define ToolsetConst$types$ghost$weegieboard 14		// 0
#define ToolsetConst$types$ghost$vape 15			// 0
#define ToolsetConst$types$ghost$hornybat 16		// 0
#define ToolsetConst$types$ghost$saltpile 17		// (bool)stepped
#define ToolsetConst$types$ghost$videoCamera 18		// void

// Weak affixes
#define ToolSetConst$affix$weakFlashlights 1
#define ToolSetConst$affix$fewerHidingSpots 2
#define ToolSetConst$affix$noVapes 3
#define ToolSetConst$affix$noHornyBats 4
#define ToolSetConst$affix$noRadios 5
#define ToolSetConst$affix$powerOutage 6
#define ToolSetConst$affix$noPills 7
#define ToolSetConst$affix$noEvidenceUntilSalted 8
// Strong affixes
#define ToolSetConst$affix$noArousalMonitor 1		// Arousal monitor shows ???
#define ToolSetConst$affix$ghostInvisible 2			// Ghost is permanently invisible
#define ToolSetConst$affix$ghostSpeed 3				// Ghost speed increased by 20%
#define ToolSetConst$affix$noThermometer 4			// Thermometer missing
#define ToolSetConst$affix$ghostRoomChange 5		// Ghost has a 50% chance when roaming to make the new room their home, starting every 420 sec after a room change.
#define ToolSetConst$affix$reqMotionSensor 6		// Ghost won't touch things until motion sensed
#define ToolSetConst$affix$noDuplicates 7			// Bring only one of each item
#define ToolSetConst$affix$vibrator 8


// Game data for the level linkset
// The game data is stored in a list. Index 0 is ALWAYS the uuid of the player.
// We can define the other data we need to store about each player here, starting from 1
#define PD_DEAD 1           // (int)is_dead
#define PD_AROUSAL 2        // We'll put an llGetTime timestamp here for invul. 0 -> 100
#define PD_CLOTHES 3        // 20 points total, <= 10 for underwear, 0 for naked

#define isHunting() (int)idbGetByIndex(idbTable$GHOST_BEHAVIOR, idbTable$GHOST_BEHAVIOR$HUNTING)

// Helper macros for the level linkset
#define isPlayerDead(idx) \
    getPlayerDataInt(idx, PD_DEAD)
#define setPlayerDead( idx, dead ) \
    setPlayerData(idx, PD_DEAD, dead)

#define getPlayerArousal( idx ) \
    getPlayerDataFloat(idx, PD_AROUSAL)
#define setPlayerArousal( idx, arousal ) \
    setPlayerData(idx, PD_AROUSAL, arousal)

#define getPlayerClothes( idx ) \
    getPlayerDataInt(idx, PD_CLOTHES)
#define setPlayerClothes(idx, amount ) \
    setPlayerData(idx, PD_CLOTHES, amount)


#define getWeakAffix(affixes) (affixes&0xF)
#define getStrongAffix(affixes) ((affixes>>4)&0xF)
#define hasWeakAffix(affixes, affix) (getWeakAffix(affixes)==affix)
#define hasStrongAffix(affixes, affix) (getStrongAffix(affixes)==affix)

#define GhostHelper$SALT_MAX_CHARGES 3

#define GhostHelper$flashlightSettings 
#define GhostHelper$ecchisketchTexture "9b2f4cf3-2796-4a6a-e5f4-0b93693c86aa"

// Percent goes to 200
#define GhostHelper$getFlashlightLightSettings( on, percent ) \
	(list)PRIM_POINT_LIGHT + on + <1.000, 0.928, 0.5> + 1 + (4.0*(float)percent/100.0) + 1
#define GhostHelper$getFlashlightFrontSettings( link, percent ) \
	gsmFullbright(link, 2, ONE_VECTOR*(percent*0.01*0.5+(0.5*(percent>0)))) + \
	PRIM_GLOW + 2 + (percent*0.01*0.5+(0.2*(percent>0)))
	
// perc is an int
#define GhostHelper$getGlowstickSettings( link, on, perc ) _ghGGS(link, on, perc)
list _ghGGS( int link, int on, int percent ){
	
	float perc = percent*0.01;
	float glow = (0.1+0.4*perc);
	
	if( perc < 0 ){
		perc = 0;
		glow = 0;
	}
	
	// Convert to quartic out
	perc = 1.0-llPow(1-perc, 4);
	return (list)
		PRIM_POINT_LIGHT + on + <0.665, 0.181, 1.000> + 1.0 + (1+4*perc) + 1.0 + 
		gsmFullbright(link, 0, (ONE_VECTOR*glow)) + 
		PRIM_GLOW + 0 + glow
	;

}


// Tools that don't require a remoteloaded script
// Aka all tools that can't be used from both hand and placed
#define LevelCustomType$GHOSTHELPER "oToolset"				// Generic type for traps like the lasher
		#define LevelCustomEvt$GHOSTHELPER$pills 1			// 
	
#define onLevelCustomGhosthelperPills( toolsetuuid, worldID ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOSTHELPER AND argInt(2) == LevelCustomEvt$GHOSTHELPER$pills ){ \
		key toolsetuuid = argKey(0); \
		key worldID = argKey(3);




// Tool IDB iteration macros
// Get linksetdata keys starting with idbTable$TOOLS followed by exactly 36 characters
#define getToolTableKeys() llLinksetDataFindKeys(idbTable$TOOLS+".{36}", 0, -1)
#define forTool(...) OVERLOAD(forTool, __VA_ARGS__)
#define forTool2(index, tool) list _k = getToolTableKeys(); integer index; for(; index < count(_k); ++index ){ str tool = llLinksetDataRead(l2s(_k,index));
#define forTool3(index, uuid, tool) forTool2(index, tool) key uuid = llGetSubString(l2s(_k, index), 1,-1);
// Index of table above
// use table idbTable$TOOLS. Not indexed, it instead uses idbTable$TOOLS+(str)assetUUID. Each row is a JSON array: int type, key heldBy, var data
#define TOOL_TYPE 0
#define TOOL_HELDBY 1
#define TOOL_DATA 2




#define ghostHelper$dialog$globals \


#define ghostHelper$DIFFICULTY_DESCS [ \
    "- Players break free from bondage devices after 30 seconds\n"+ \
    "- Pills clear 50% arousal" \
    , \
    "- Pills clear 35% arousal\n"+ \
    "- Slightly longer hunts\n"+ \
    "- Less active ghosts\n"+ \
    "- Weak affix" \
    , \
    "- Pills clear 25% arousal\n"+ \
    "- Longer hunts\n"+ \
    "- Doors start open\n"+ \
    "- Much less active ghosts\n"+ \
    "- Weak and strong affix" \
	, \
    "- Only 2 evidence types\n"+ \
    "- Pills clear 20% arousal\n"+ \
    "- Longest hunts\n"+ \
    "- Doors start open\n"+ \
    "- Much less active ghosts\n"+ \
    "- Weak and strong affix" \
]

list ghostHelper_DIFFICULTIES = [
    "Virgin",
    "Amateur",
    "Professional",
	"Hardcore"
];



	

#endif

