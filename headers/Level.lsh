#ifndef __Level
#define __Level

	#define LevelMethod$update 0			// void - Updates ALL assets
	#define LevelMethod$invite 1			// (key)player - Invites a specific player to your game. Using * will invite all players within 10m of the game starter
	#define LevelMethod$resetPlayers 2		// Resets players to owner only
	#define LevelMethod$acceptInvite 3		// void - Accepts an invite
	#define LevelMethod$raiseEvent 4		// (str)script, (int)evt, (var)data1, (var)data2... - Owner only depending on prefix
	#define LevelMethod$getPlayers 5		// (int)callbackMethod, (str)callbackScript - Sends callbackMethod to callbackScript with data (str)player1, (str)player2... 
	#define LevelMethod$getHudAssets 6			// void - After setting inventory drop, the HUD prim sends this to Level to get all HUD assets. HUD assets names should start with "HUD:"
	#define LevelMethod$updateAllHudAssets 7	// void - Sends a request to all active players to request new HUD assets
	#define LevelMethod$scriptInit 8			// (str)script - A script has been remoteloaded. Only needed by scripts in LevelConst$REMOTE_SCRIPTS
	#define LevelMethod$autoJoin 9			// Sent by the HUD to try to auto reconnect to a level
	#define LevelMethod$removePlayer 10		// (key)player
	#define LevelMethod$toggleGame 11		// (bool)game_in_progress - Locks invites
	#define LevelMethod$forceRefreshPortal 12	// void - Force refreshes the portal with up to date players on the linkset sending the command
	#define LevelMethod$getHUDs 5			// (int)callbackMethod, (str)callbackScript - Sends callbackMethod to callbackScript with data (str)hud1, (str)hud2... 
	
	#define LevelEvt$mainMenu 1				// Raised when the owner clicks the level controller
	#define LevelEvt$custom 2				// (key)sender, (str)script, (int)evt, (var)data1, (var)data2... These events are defined in resources/LevelCustomEvents
	#define LevelEvt$init 3					// Level initialized
	

	#define LevelConst$REMOTE_SCRIPTS (list)\
		"Rezzer" + \
		"Spawner"

	#define onLevelMainMenu() \
		if( SENDER_SCRIPT IS "Level" AND EVENT_TYPE IS LevelEvt$mainMenu ){
		
	#define onLevelInit() \
		if( SENDER_SCRIPT IS "Level" AND EVENT_TYPE IS LevelEvt$init ){
		
	#define isEventLevelCustom() \
		(SENDER_SCRIPT IS "Level" AND EVENT_TYPE IS LevelEvt$custom)
		
	#define onLevelCustom( sender, script, evt, data ) \
		if isEventLevelCustom() { \
			key sender = argKey(0); \
			str script = argStr(1); \
			int evt = argInt(2); \
			list data = llDeleteSubList(METHOD_ARGS, 0, 2);
			
	#define Level$updateThis() \
		runMethod(LINK_THIS, "Level", LevelMethod$update, [])
	#define Level$update() \
		runOmniMethod("Level", LevelMethod$update, [])
	#define Level$forceRefreshPortal() \
		runOmniMethod("Level", LevelMethod$forceRefreshPortal, [])

	#define Level$getPlayers( callbackMethod ) \
		runOmniMethod("Level", LevelMethod$getPlayers, callbackMethod + llGetScriptName() )

	#define Level$scriptInit() \
		runMethod(LINK_THIS, "Level", LevelMethod$scriptInit, llGetScriptName())
	#define Level$invite( player ) \
		runMethod(LINK_THIS, "Level", LevelMethod$invite, player)
	#define Level$inviteNearby() \
		runMethod(LINK_THIS, "Level", LevelMethod$invite, "*")
	#define Level$resetPlayers() \
		runMethod(LINK_THIS, "Level", LevelMethod$resetPlayers, "*")
	#define Level$acceptInvite( target ) \
		runMethod(target, "Level", LevelMethod$acceptInvite, [])
	#define Level$raiseEvent( customType, evt, data ) \
		runOmniMethod("Level", LevelMethod$raiseEvent, customType + evt + data )
	#define Level$raiseEventTarg( targ, customType, evt, data ) \
		runMethod(targ, "Level", LevelMethod$raiseEvent, customType + evt + data )
	#define Level$getHudAssets( target ) \
		runMethod(target, "Level", LevelMethod$getHudAssets, [])
	#define Level$updateAllHudAssets( target ) \
		runMethod(target, "Level", LevelMethod$updateAllHudAssets, [])
	#define Level$autoJoin() \
		runOmniMethod("Level", LevelMethod$autoJoin, [])
	#define Level$removePlayer( player ) \
		runMethod(LINK_THIS, "Level", LevelMethod$removePlayer, player)
	#define Level$toggleGame( gameActive ) \
		runMethod(LINK_THIS, "Level", LevelMethod$toggleGame, gameActive)


#endif
