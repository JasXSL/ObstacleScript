#ifndef __Trap
#define __Trap

#define TrapConst$CHAN (OBSTACLE_CHAN+0x7)	// Listener


#define TrapTask$seat 1						// (key)player
#define TrapTask$attack 2					// 
#define TrapTask$unSeat 3					// 


#define Trap$seat( targ, label, player ) \
	llRegionSayTo(targ, TrapConst$CHAN, mkarr(label + TrapTask$seat + (player)))

#define Trap$attack( targ, label, args ) \
	llRegionSayTo(targ, TrapConst$CHAN, mkarr(label + TrapTask$attack + args))

#define Trap$attackAll( label, args ) \
	llRegionSay(TrapConst$CHAN, mkarr(label + TrapTask$attack + args))



// Level event bindings
#define LevelCustomType$TRAP "oTrap"				// Generic type for traps like the lasher
	#define LevelCustomEvt$TRAP$hit 1					// (key)player1, (key)player2... - Trap has hit a player
	#define LevelCustomEvt$TRAP$seated 2				// (key)player1, (key)player2... - Trap has been sat on by one or more players
	#define LevelCustomEvt$TRAP$unseated 3				// (key)player1, (key)player2... - Trap has been unsat by one or more players



#define onTrapHit( trap, players ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$TRAP AND argInt(2) == LevelCustomEvt$TRAP$hit ){ \
		key trap = argKey(0); \
		list players = llDeleteSubList(METHOD_ARGS, 0, 2);

#define onTrapSeated( trap, players ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$TRAP AND argInt(2) == LevelCustomEvt$TRAP$seated ){ \
		key trap = argKey(0); \
		list players = llDeleteSubList(METHOD_ARGS, 0, 2);

#define onTrapUnseated( trap, players ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$TRAP AND argInt(2) == LevelCustomEvt$TRAP$unseated ){ \
		key trap = argKey(0); \
		list players = llDeleteSubList(METHOD_ARGS, 0, 2);




// Useful templates

// Put this into onTrapHit to auto seat a viable player when a trap is triggered
// Auto seats with a filter function, the filter function is passed the arguments key trap, key player
#define _TRAPS_autoSeat(filterFunction){ \
	\
	players = llListRandomize(players, 1); \
	integer i; \
	for(; i < count(players); ++i ){ \
		 \
		str p = l2k(players, i); \
		if( isPlayer(p) ){ \
			 \
			if( filterFunction(trap, p) ){ \
			 \
				Trap$seat(trap, "*", p); \
				i = count(players); \
				 \
			}	\
			\
		} \
	 \
	} \
}




#endif
