#ifndef __CrusherWall
#define __CrusherWall

// Wall description: [(vec)size, (var)id, (vec)translate_distance, (float)duration]

#define CrusherWallConst$CHAN (OBSTACLE_CHAN+1)	// Listener

#define CrusherWallTask$move 1					// (int)dir, (array)ids_that_should_move
#define CrusherWallTask$blink 2					// (int)id - Blinks the wall


#define CrusherWallConst$DIR_FWD 0	// Go to extended
#define CrusherWallConst$DIR_BACK 1		// Go to contracted
#define CrusherWallConst$DIR_PING_PONG 2	// This makes it ping pong back and forwards endlessly until one of the above are sent. Note that this will go out of sync with other walls


#define CrusherWall$trigger( dir, ids ) \
	llRegionSay(CrusherWallConst$CHAN, mkarr(CrusherWallTask$move + dir + ids))
#define CrusherWall$blink( id ) \
	llRegionSay(CrusherWallConst$CHAN, mkarr(CrusherWallTask$blink + id))
#define CrusherWall$blinkTarg( targ, id ) \
	llRegionSayTo(targ, CrusherWallConst$CHAN, mkarr(CrusherWallTask$blink + id))





// Helper functions
list _CRUSHERS = [];    // 0b1111 = time
                                    // 0b1 0000 = extended
integer _CRUSHERS_FORCE; // 1 bit array of crushers that should be out because of button
list _CRUSHERS_KEYS;

_CRUSHERS_setup( int nr, float speed ){
	
	integer i;
	_CRUSHERS_KEYS = [];
	_CRUSHERS_FORCE = 0;
	_CRUSHERS = [];
	for( ; i < nr; ++i )
		_CRUSHERS += 0;
		
	setInterval("CRUSHER", speed);
	
}
	

_CRUSHERS_output(){
    
    integer i;
    
    // Generate output
    list cout; list cin;
    for( i = 0; i < count(_CRUSHERS); ++i ){
        
        if( l2i(_CRUSHERS, i) & 0x10 || _CRUSHERS_FORCE&(1<<i) )
            cout += (str)i;
        else
            cin += (str)i;
        
    }
    
    CrusherWall$trigger( CrusherWallConst$DIR_FWD, cout );
    CrusherWall$trigger( CrusherWallConst$DIR_BACK, cin );
    
}
_CRUSHERS_btn( key button ){
	
	vector pos = prPos(button);
	float dist; key targ;
	integer i;
	for(; i < count(_CRUSHERS_KEYS); ++i ){
		
		key k = l2k(_CRUSHERS_KEYS, i);
		float d = llVecDist(prPos(k), pos);
		if( targ == "" || d < dist ){
		
			dist = d;
			targ = k;
			
		}
		
	}
	
	integer nr = (int)j(prDesc(targ), 1);
	_CRUSHERS_FORCE = _CRUSHERS_FORCE|(1<<nr);
	_CRUSHERS_output();
	CrusherWall$blinkTarg(targ, "*");
	setTimeout("FO:"+(str)nr, 4.5);


}
_CRUSHERS_onSpawn( key obj ){
	
	if( llKey2Name(obj) == "CrusherWall" )
		_CRUSHERS_KEYS += obj;
		
}
_CRUSHERS_onTimer( string id ){
	
	if( llGetSubString(id, 0, 4) == "_CFO:" ){
        
        integer n = (int)llGetSubString(id, 5, -1);
        _CRUSHERS_FORCE = _CRUSHERS_FORCE&~(1<<n);
        
    }
	
	else if( id != "CRUSHER" )
		return;
		
	// bit 4 = in/out
    // bit 0-3 = state

    // Start by adding steps
    integer i;
    for( ; i < count(_CRUSHERS); ++i ){
        
        integer n = l2i(_CRUSHERS, i);
        if( (n&0xF) != 0xF )
            ++n;
        _CRUSHERS = llListReplaceList(_CRUSHERS, (list)n, i, i);
        
    }
    
    // Then flip contracted walls
    for( i=0; i < count(_CRUSHERS); ++i ){
        
        integer n = l2i(_CRUSHERS, i);
        integer out = n&0x10;
        integer steps = n&0xF;

        if( !out ){
            
            // Controls how long a wall should wait before pushing out
            // Higher divisor = longer contract time
            integer flip = llFrand(1) < ((steps+1.0)/4.0);
            if( flip ){
                
                n = 0x10;   // Set extended and no steps
                _CRUSHERS = llListReplaceList(
                    _CRUSHERS,
                    (list)n,
                    i, i
                );
                
            }
            
        }
        
    }
    
    // Make sure no walls stay extracted for more than 4 turns
    for( i=0; i < count(_CRUSHERS); ++i ){
        
        integer n = l2i(_CRUSHERS, i);
        if( (n&0xF) > 4 ){
            
            _CRUSHERS = llListReplaceList(
                _CRUSHERS,
                (list)0,
                i, i
            );
            
        }
        
    }
    
    
    // Make sure there are at least 2 walls contracted
    list extended;
    for( i = 0; i< count(_CRUSHERS); ++i ){
        
        if( l2i(_CRUSHERS, i) & 0x10 )
            extended += (list)(l2i(_CRUSHERS, i)&0xF) + i;
        
    }
    integer offs = (count(extended)/2)-(count(_CRUSHERS)-1);
    list targets = llListSort(extended, 2, FALSE);  // Prefer walls that haven't moved for a while
    for( i = 0; i < offs; ++i )
        _CRUSHERS = llListReplaceList(
            _CRUSHERS, 
            (list)0, 
            l2i(targets, i*2+1), l2i(targets, i*2+1)
        );
    
     
    // Make sure any extended wall has a neighbour that's retracted
    for( i = count(_CRUSHERS)-1; i >= 0; --i ){
        
        integer n = l2i(_CRUSHERS, i);
        // Just extended
        if( n&0x10 && !(n&0xF) ){
            
            integer left = -1; integer right = -1;
            if( i )
                left = l2i(_CRUSHERS, i-1);
            if( i < count(_CRUSHERS)-1 )
                right = l2i(_CRUSHERS, i+1);
                
            if( 
                (left == -1 || left&0x10 || n == 1) &&
                (right == -1 || right&0x10) 
            ){
                
                integer offs = -1;
                if( left == -1 )
                    offs = 1;
                else if( ~left && ~right && llFrand(1) < .75 ) // Favor right
                    offs = -offs;
                
                _CRUSHERS = llListReplaceList(_CRUSHERS, (list)0, i+offs, i+offs);
                
            }
            
            
        }
        
    }
    
    // make sure there's no 3 in a row contracted
    integer len;
    for( i = 0; i < count(_CRUSHERS); ++i ){
        
        if( ~l2i(_CRUSHERS, i)&0x10 ){
            
            if( ++len == 3 ){
                _CRUSHERS = llListReplaceList(
                    _CRUSHERS,
                    (list)0x10,
                    i-1, i-1
                );
                len = 1;
            }
            
        }
        else
            len = 0;
        
        
    }
    
    
    // First wall needs to open more often and should be done last
    // Otherwise 1 and 2 will cycle
    if( l2i(_CRUSHERS, 0)&0xF > 2 )
        _CRUSHERS = llListReplaceList(_CRUSHERS, (list)0, 0, 0);
    //qd("Post: "+ CRUSHERS);
    
    _CRUSHERS_output();
	

}














#endif
 