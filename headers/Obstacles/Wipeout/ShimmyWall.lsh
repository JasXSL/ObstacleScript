#ifndef __ShimmyWall
#define __ShimmyWall

// Description: [(str)label, (int)flags]
#define ShimmyWallFlag$reverse 1					// Makes the rightmost spout not trigger instead of leftmost one

#define ShimmyWallConst$CHAN (OBSTACLE_CHAN+0x51)	// Listener

#define ShimmyWallTask$activateAll 1				// void - Activates all spouts
#define ShimmyWallTask$toggle 2						// (bool)on - Turns the obstacle off or on.

#define ShimmyWall$activateAll( label ) \
	llRegionSay(ShimmyWallConst$CHAN, mkarr((label) + ShimmyWallTask$activateAll))
#define ShimmyWall$toggle( label, on ) \
	llRegionSay(ShimmyWallConst$CHAN, mkarr((label) + ShimmyWallTask$toggle + on))



// Level event bindings
#define LevelCustomType$SHIMMY_WALL "oShimmyWall"
	#define LevelCustomEvt$SHIMMY_WALL$hitStart 1		// (key)player1, (key)player2...
	#define LevelCustomEvt$SHIMMY_WALL$hitEnd 2		// (key)player1, (key)player2...



#define onShimmyWallHit( object, start, players ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$SHIMMY_WALL AND (argInt(2) == LevelCustomEvt$SHIMMY_WALL$hitStart OR argInt(2) == LevelCustomEvt$SHIMMY_WALL$hitEnd) ){ \
		key object = argKey(0); \
		int start = argInt(2) == LevelCustomEvt$SHIMMY_WALL$hitStart; \
		list players = llDeleteSubList(METHOD_ARGS, 0, 2);
		









#endif
