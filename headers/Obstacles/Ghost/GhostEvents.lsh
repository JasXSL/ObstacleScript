#ifndef __GhostEvents
#define __GhostEvents

#define GhostEventGet$active() (int)idbGetByIndex(idbTable$GHOST_EVENTS, idbTable$GHOST_EVENTS$active) // Gets if an event is active

#define GhostEventsMethod$trigger 1		// void - Triggers a ghost event. Ghost events will generally require LOS to at least one player. And delays a hunt.
#define GhostEventsMethod$subset 2		// void - Registers the sender as a ghost event helper. Such as the ghost hands.
#define GhostEventsMethod$stop 3		// void - Note: ONLY used by subsets to signal that the event has stopped.

#define GhostEvents$trigger( targ ) \
	runMethod(targ, "GhostEvents", GhostEventsMethod$trigger, [])
#define GhostEvent$subset() \
	runOmniMethod("GhostEvents", GhostEventsMethod$subset, [])
#define GhostEvents$stop( targ ) \
	runMethod(targ, "GhostEvents", GhostEventsMethod$stop, [])


#define GhostEventsEvt$begin 1			// (arr)players, type, subtype - 
#define GhostEventsEvt$end 2			// (arr)players, type, subtype -


// Custom portal events
#define PortalCustomType$GhostEvents "oGhostEvents"
	#define PortalCustomType$GhostEvents$hup 0			// void - Sent by a ghost on spawn to hookup helpers
	#define PortalCustomType$GhostEvents$trigger 1		// (arr)players - Trigger an animation. Players are players in the ghost's current room.
	
#define onPortalGhostEventsHookup( ghost ) \
	if( isEventPortalCustom() AND argStr(1) == PortalCustomType$GhostEvents AND argInt(2) == PortalCustomType$GhostEvents$hup ){ \
		key ghost = argKey(0); \

#define onPortalGhostEventsTrigger( ghost, players ) \
	if( isEventPortalCustom() AND argStr(1) == PortalCustomType$GhostEvents AND argInt(2) == PortalCustomType$GhostEvents$trigger ){ \
		key ghost = argKey(0); \
		list players = llJson2List(argStr(3)); \


// Interact types to be shuffled
#define GhostEventsConst$IT_ITEMS 0				// Do something with the electronics
	#define GhostEventsConst$ITI_POP 0				// makes the lights red
	#define GhostEventsConst$ITI_ELECTRONICS 1		// turns off nearby cameras and pops sensors off walls
	#define GhostEventsConst$ITI_BREAKER 2			// turns off the breaker
	#define GhostEventsConst$ITI_DOORS 3			// Slam all nearby doors
#define GhostEventsConst$IT_POSSESS 1			// Interacts with one or more players directly
	#define GhostEventsConst$ITP_SUBSET -1			// This ghost event is handled by a subset (spawned ghost event handler, such as ghost hands)
	#define GhostEventsConst$ITP_RUB_UNI 0			// Unisex self rub
	#define GhostEventsConst$ITP_RUB_F 1				// requires breasts
	#define GhostEventsConst$ITP_RUB_DUO 2			// Rub 2 players
	#define GhostEventsConst$ITP_SPANK 3				// Spank, requires wall
	#define GhostEventsConst$ITP_DRAG 4				// Drag, requires 3m or so stright behind the player


#define onGhostEventsBegin( players, type, subtype ) \
	if( SENDER_SCRIPT IS "GhostEvents" AND EVENT_TYPE IS GhostEventsEvt$begin ){ \
		list players = llJson2List(argStr(0)); \
		int type = argInt(1); \
		int subtype = argInt(2);
		
#define onGhostEventsEnd( players, type, subtype ) \
	if( SENDER_SCRIPT IS "GhostEvents" AND EVENT_TYPE IS GhostEventsEvt$end ){ \
		list players = llJson2List(argStr(0)); \
		int type = argInt(1); \
		int subtype = argInt(2);
		

// Level events
#define LevelCustomType$GHOSTEVT "oGhostEvt"
	#define LevelCustomEvt$GHOSTEVT$evt 1		// (arr)players, (int)baseType, (int)subType, (float)dur - A ghost event has triggered.
												// duration can be 0 to stop it prematurely
	
#define onGhostEvent( ghost, players, baseType, subType, dur ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOSTEVT AND argInt(2) == LevelCustomEvt$GHOSTEVT$evt ){ \
		key ghost = argKey(0); \
		list players = llJson2List(argStr(3)); \
		int baseType = argInt(4); \
		int subType = argInt(5); \
		float dur = argFloat(6);


#endif

