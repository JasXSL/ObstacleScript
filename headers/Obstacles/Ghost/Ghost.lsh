#ifndef __Ghost
#define __Ghost

// Ghost uses standard methods
#define GhostMethod$followNodes 1		// portal1, portal2... - Follow path nodes
#define GhostMethod$toggleHunt 2		// (bool)hunting - Start or stop hunting players
#define GhostMethod$setType 3			// (int)ghost_type, (int)evidenceTypes - Sets a ghost type and evidence, affecting its behavior
#define GhostMethod$smudge 4			// void  - Player has used a smudge stick
#define GhostMethod$interact 5			// void - Interact with a nearby item
#define GhostMethod$stop 6				// (bool)stop, (bool)verbose - Stops the ghost. Verbose is useful for debugging
#define GhostMethod$sendToChair 7		// key chair, key hud, int temp - Tells the ghost to go to a chair and trap the player. If no chair is available, drop the player.


#define GhostMethod$cbNodes 100			// Callback for Nodes.lsh getNodes method
#define GhostMethod$cbPlumbing 101		// Callback for getting a position to teleport with plumbing

#define GhostConst$type$succubus 0			// (Need player preference) Will prefer interacting with a particular player if they're nearby. During a hunt, target that player in particular.
#define GhostConst$type$yuri 1				// (Female needed, arousal needed) Being close to the ghost increases player arousal. Prefers female hunters.
#define GhostConst$type$asswang 2			// (Looking at it needed, hunt speed needed) Only active if nobody's looking at it. Moves twice as fast during a hunt unless observed.
#define GhostConst$type$powoltergeist 3		// TEST - Prefers interacting with items over players, and can throw things twice as hard.
#define GhostConst$type$yaoikai 4			// (Deafness needed, male needed, hunt earlier needed) Can hunt earlier if players are typing within 3m of it. Cannot hear footsteps. Prefers male investigators.
#define GhostConst$type$imp 5				// TEST - Prefers touching players over interacting with items. No arousal penalty when successfully using a luigi board.
#define GhostConst$type$hantuwu 6			// (Interactivity needed) Starts low interactive and gets more interactive as arousal increases.
#define GhostConst$type$inugami 7			// (Activity check needed) Gets less interactive when players are near it. More interactive if nobody's near it.
#define GhostConst$type$obukakke 8			// TEST - Active ability leaves stains on everything nearby without causing EMF or movement. Adds arousal when it does.
#define GhostConst$type$gooryo 9			// TEST - Can teleport directly between rooms with plumbing. Doesn't roam normally, only teleports.
#define GhostConst$type$ehee 10				// TEST - Will only give EMF if nobody's got line of sight to it. Can't hunt if a player is within 8 meters and has LOS
#define GhostConst$type$bare 11				// TEST - Will hunt earlier if in a dark room. Won't turn off lights. Interacts with players more in the dark. 3x chance of stripping a player in the dark.

// Indexes for parsing the ghost desc. Note that desc is handled by GhostAux
#define GhostDesc$inLitRoom 0				// int - Ghost is currently in a lit room
#define GhostDesc$aggression 1				// int - Modifier for triggering a hunt
#define GhostDesc$activity 2				// int - Modifier for doing an interaction

#define GhostGet$inLitRoom( desc ) ((int)j(desc, GhostDesc$inLitRoom))
#define GhostGet$aggression( desc ) ((int)j(desc, GhostDesc$aggression))
#define GhostGet$activity( desc ) ((int)j(desc, GhostDesc$activity))


#define GhostEvt$type 1						// int type - Ghost type received
#define GhostEvt$hunt 2						// bool hunting - Ghost is hunting
#define GhostEvt$lights 3					// bool lights_on - Raised when lights on in the current room of the ghost is changed
#define GhostEvt$caught 4					// key player, key chair - Caught a player. Carry them to the chair.
#define GhostEvt$huntStep 5					// void - Raised when the ghost makes a footstep while hunting
#define GhostEvt$alpha 6					// float alpha - Raised when the ghost alpha changes


#define onGhostType( type, evidence ) \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$type ){ \
		int type = argInt(0); \
		int evidence = argInt(1);
#define onGhostCaught( player, chair ) \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$caught ){ \
		key player = argKey(0); \
		key chair = argKey(1);
#define onGhostHuntStep(  ) \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$huntStep ){

#define onGhostAlpha( alpha ) \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$alpha ){ \
		float alpha = argFloat(0);
#define onGhostHunt( hunting ) \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$hunt ){ \
		bool hunting = argInt(0);



#define GhostConst$evidence$owometer 0x1
#define GhostConst$evidence$writing 0x2
#define GhostConst$evidence$spiritbox 0x4
#define GhostConst$evidence$temps 0x8
#define GhostConst$evidence$hots 0x10
#define GhostConst$evidence$stains 0x20


// Corresponds to the ghost index above
#define GhostConst$type$names (list) \
	"Succubus" + \
	"Yuri" + \
	"Asswang" + \
	"Powoltergeist" + \
	"Yaoikai" + \
	"Imp" + \
	"Hantuwu" + \
	"Inugami" + \
	"Obukakke" + \
	"Gooryo" + \
	"Ehee" + \
	"Bare"



// Corresponds to the ghost type indexes
#define GhostConst$evidenceTypes [\
	GhostConst$evidence$stains|GhostConst$evidence$spiritbox|GhostConst$evidence$temps, \
	GhostConst$evidence$owometer|GhostConst$evidence$spiritbox|GhostConst$evidence$hots, \
	GhostConst$evidence$owometer|GhostConst$evidence$writing|GhostConst$evidence$temps, \
	GhostConst$evidence$owometer|GhostConst$evidence$writing|GhostConst$evidence$hots, \
	GhostConst$evidence$owometer|GhostConst$evidence$writing|GhostConst$evidence$spiritbox, \
	GhostConst$evidence$temps|GhostConst$evidence$spiritbox|GhostConst$evidence$owometer, \
	GhostConst$evidence$writing|GhostConst$evidence$spiritbox|GhostConst$evidence$temps, \
	GhostConst$evidence$writing|GhostConst$evidence$temps|GhostConst$evidence$hots, \
	GhostConst$evidence$stains|GhostConst$evidence$temps|GhostConst$evidence$hots, \
	GhostConst$evidence$hots|GhostConst$evidence$writing|GhostConst$evidence$stains, \
	GhostConst$evidence$owometer|GhostConst$evidence$hots|GhostConst$evidence$stains, \
	GhostConst$evidence$writing|GhostConst$evidence$stains|GhostConst$evidence$spiritbox \
]
#define getEvidenceTypes( ghostType ) \
	l2i(GhostConst$evidenceTypes, ghostType)




#define LevelCustomType$GHOST "oGhost"				// Generic type for traps like the lasher
	#define LevelCustomEvt$GHOST$spawned 1			// void - The ghost has been spawned
	#define LevelCustomEvt$GHOST$caught 2			// key player - The ghost has caught a player
	

#define onLevelCustomGhostSpawned( ghost ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOST AND argInt(2) == LevelCustomEvt$GHOST$spawned ){ \
		key ghost = argKey(0);
#define onLevelCustomGhostCaught( ghost, player ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOST AND argInt(2) == LevelCustomEvt$GHOST$caught ){ \
		key ghost = argKey(0); \
		key player = argKey(3);



#define Ghost$followNodes( nodes ) \
	runOmniMethod("Ghost", GhostMethod$followNodes, nodes)
#define Ghost$stop( stop, verbose ) \
	runOmniMethod("Ghost", GhostMethod$stop, stop + verbose)
#define Ghost$start() \
	runOmniMethod("Ghost", GhostMethod$stop, [])
#define Ghost$toggleHunt( on ) \
	runOmniMethod("Ghost", GhostMethod$toggleHunt, on)
#define Ghost$setType( type, evidence ) \
	runOmniMethod("Ghost", GhostMethod$setType, type + evidence)
#define Ghost$smudge() \
	runOmniMethod("Ghost", GhostMethod$smudge, [])
#define Ghost$interact() \
	runOmniMethod("Ghost", GhostMethod$interact, [])
#define Ghost$sendToChair( chair, hud, temp ) \
	runOmniMethod("Ghost", GhostMethod$sendToChair, chair + hud + temp)


	

#endif
