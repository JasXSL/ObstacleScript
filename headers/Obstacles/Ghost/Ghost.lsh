#ifndef __Ghost
#define __Ghost

#define GhostTable$caughtSeat "caS"		// Key of the seat we need to place the player on
#define GhostTable$caughtHud "caH"		// Key of the hud of the player we need to place on the bondage seat

#define GhostGet$caughtSeat() llLinksetDataRead(GhostTable$caughtSeat)
#define GhostGet$caughtHud() llLinksetDataRead(GhostTable$caughtHud)

#define GhostGet$type() (int)idbGetByIndex(idbTable$GHOST_SETTINGS, idbTable$GHOST_SETTINGS$TYPE)
#define GhostGet$evidence() (int)idbGetByIndex(idbTable$GHOST_SETTINGS, idbTable$GHOST_SETTINGS$EVIDENCE)
#define GhostGet$affixes() (int)idbGetByIndex(idbTable$GHOST_SETTINGS, idbTable$GHOST_SETTINGS$AFFIXES)
#define GhostGet$difficulty() (int)idbGetByIndex(idbTable$GHOST_SETTINGS, idbTable$GHOST_SETTINGS$DIFFICULTY)
#define GhostGet$ghost() idbGetByIndex(idbTable$GHOST_SETTINGS, idbTable$GHOST_SETTINGS$GHOST) // GhostHelper only


// These use the description (for ease of debugging)
#define GhostGet$inLitRoom( desc ) ((int)j(desc, GhostDesc$inLitRoom))
#define GhostGet$aggression( desc ) ((int)j(desc, GhostDesc$aggression))
#define GhostGet$activity( desc ) ((int)j(desc, GhostDesc$activity))
#define GhostGet$sucTarg( desc ) ((key)j(desc, GhostDesc$ghostCustom))

// Ghost uses standard methods
#define GhostMethod$followNodes 1		// portal1, portal2... - Follow path nodes
#define GhostMethod$toggleHunt 2		// (bool)hunting - Start or stop hunting players
#define GhostMethod$setType 3			// (int)ghost_type, (int)evidenceTypes, (int)difficulty, (int)affixes - Sets a ghost type and evidence, affecting its behavior
#define GhostMethod$smudge 4			// (key)player  - Player has used a smudge stick
//#define GhostMethod$interact 5			// void - Interact with a nearby item
#define GhostMethod$stop 6				// (bool)stop, (bool)verbose - Stops the ghost. Verbose is useful for debugging
#define GhostMethod$sendToChair 7		// key chair, key hud, int temp - Tells the ghost to go to a chair and trap the player. If no chair is available, drop the player.
#define GhostMethod$succubusPower 8		// void - Triggers the succubus power
#define GhostMethod$incorrect 9			// void - Players tried ending the game with the wrong ghost.

#define GhostMethod$cbNodes 100			// Callback for Nodes.lsh getNodes method
#define GhostMethod$cbPlumbing 101		// Callback for getting a position to teleport with plumbing

#define GhostConst$type$succubus 0			// TEST - Will will only touch a particular player. If that player dies, pick a new target. During a hunt, it can only hear that player's footsteps. When it uses its power, it teleports to its target if they're in the house. Has a greater crucifix radius.
#define GhostConst$type$yuri 1				// - Being close to the ghost adds 50% more arousal. Will only touch players without penis. Stepping through salt will have the same effect as the vape stick.
#define GhostConst$type$asswang 2			// - Will only touch players with their back towards it. Moves twice as fast while chasing a player unless observed, in which case it's moving at the slowest speed.
#define GhostConst$type$powoltergeist 3		// - Prefers interacting with items over players, and can throw things twice as hard.
#define GhostConst$type$yaoikai 4			// - Typing or talking near it may provoke a hunt, but can only hear footsteps near it. Will only touch investigator with penis.
#define GhostConst$type$imp 5				// - Prefers touching players over interacting with items. No arousal penalty when successfully using a luigi board.
#define GhostConst$type$hantuwu 6			// - Starts low interactive and gets more interactive as arousal increases.
#define GhostConst$type$inugami 7			// - Gets less interactive when players are near it. More interactive if nobody's near it. Can go "bork" on spirit box
#define GhostConst$type$obukakke 8			// - Active ability leaves stains on everything nearby without causing EMF or movement. Adds arousal when it does.
#define GhostConst$type$gooryo 9			// - Can teleport directly between rooms with plumbing. Doesn't roam normally, only teleports.
#define GhostConst$type$ehee 10				// - Will only give EMF if nobody's got line of sight to it. Can't hunt if a player is within 8 meters and has LOS. Higher chance of a stronger EMF.
#define GhostConst$type$bare 11				// - Will hunt earlier if in a dark room. Won't turn off lights. Interacts with players more in the dark. 3x chance of stripping a player in the dark. Rarely leaves the ghost room.
#define GhostConst$type$stringoi 12			// - Has a greater chance of stripping players. Can interact with things at a greater distance. Occasionally leaves behind ghost orbs that can be seen on the camera.
#define GhostConst$type$orghast 13			// - Roams more frequently. Has a greater chance of making noises on the microphone.
#define GhostConst$type$jim 14				// - Ghost power increases player arousal, but only usable when in a room with the lights on. Will only trigger the electric type ghost events. Motion sensors might not show up in the van. 

// Corresponds to the ghost index above
#define GhostConst$type$names (list) \
	"Succubus" + \
	"Yuri" + \
	"Asswang" + \
	"Powoltergeist" + \
	"Yaoikai" + \
	"Imp" + \
	"Hantuwu" + \
	"Inugami" + \
	"Obukakke" + \
	"Gooryo" + \
	"Ehee" + \
	"Bare" + \
	"Stringoi" + \
	"Orghast" + \
	"Jim"



// Indexes for parsing the ghost desc. Note that desc is handled by GhostAux
#define GhostDesc$inLitRoom 0				// int - Ghost is currently in a lit room
#define GhostDesc$aggression 1				// int - Modifier for triggering a hunt
#define GhostDesc$activity 2				// int - Modifier for doing an interaction
#define GhostDesc$ghostCustom 3				// var - Currently only used for succubus, stores its current target

#define GhostEvt$type 1						// int type, int evidence, int affixes, int difficulty - Ghost type received
#define GhostEvt$hunt 2						// bool hunting - Ghost is hunting
#define GhostEvt$lights 3					// bool lights_on - Raised when lights on in the current room of the ghost is changed
#define GhostEvt$caught 4					// void - Caught a player. Carry them to the chair. Use GhostGet$caughtHud() and GhostGet$caughtSeat() to get player and seat
#define GhostEvt$huntStep 5					// void - Raised when the ghost makes a footstep while hunting
#define GhostEvt$visible 6					// bool visible - Raised when the ghost goes visible or hidden


#define onGhostType() \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$type ){
#define onGhostCaught() \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$caught ){

#define onGhostHuntStep() \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$huntStep ){

#define onGhostVisible( visible ) \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$visible ){ \
		bool visible = argInt(0);
#define onGhostHunt( hunting ) \
	if( SENDER_SCRIPT IS "Ghost" AND EVENT_TYPE IS GhostEvt$hunt ){ \
		bool hunting = argInt(0);



#define GhostConst$evidence$owometer 0x1
#define GhostConst$evidence$writing 0x2
#define GhostConst$evidence$spiritbox 0x4
#define GhostConst$evidence$temps 0x8
#define GhostConst$evidence$hots 0x10		// 16
#define GhostConst$evidence$stains 0x20		// 32



// Corresponds to the ghost type indexes. The leftmost 16 bits are forced evidence types for nightmare
// When changing these, you need to recompile #Game, Ghost, and the GHOST_BOARD
#define GhostConst$evidenceTypes [\
	GhostConst$evidence$stains|GhostConst$evidence$writing|GhostConst$evidence$temps, /* Succubus */ \
	GhostConst$evidence$owometer|GhostConst$evidence$spiritbox|GhostConst$evidence$hots, /* Yuri */ \
	GhostConst$evidence$owometer|GhostConst$evidence$writing|GhostConst$evidence$temps, /* asswang */ \
	GhostConst$evidence$owometer|GhostConst$evidence$writing|GhostConst$evidence$hots, /* Powoltergeist */ \
	GhostConst$evidence$owometer|GhostConst$evidence$writing|GhostConst$evidence$spiritbox, /* Yaoikai */ \
	GhostConst$evidence$temps|GhostConst$evidence$spiritbox|GhostConst$evidence$owometer, /* Imp */ \
	GhostConst$evidence$writing|GhostConst$evidence$hots|GhostConst$evidence$temps, /* Hantuwu */ \
	GhostConst$evidence$spiritbox|GhostConst$evidence$temps|GhostConst$evidence$stains|(GhostConst$evidence$spiritbox<<16), /* Inugami */ \
	GhostConst$evidence$stains|GhostConst$evidence$temps|GhostConst$evidence$hots|(GhostConst$evidence$stains<<16), /* Obukakke */ \
	GhostConst$evidence$hots|GhostConst$evidence$writing|GhostConst$evidence$stains, /* Gooryo */ \
	GhostConst$evidence$owometer|GhostConst$evidence$hots|GhostConst$evidence$stains|(GhostConst$evidence$owometer<<16), /* Ehee */  \
	GhostConst$evidence$writing|GhostConst$evidence$stains|GhostConst$evidence$spiritbox,/* Bare */  \
	GhostConst$evidence$spiritbox|GhostConst$evidence$temps|GhostConst$evidence$hots, /* Stringoi */ \
	GhostConst$evidence$owometer|GhostConst$evidence$stains|GhostConst$evidence$spiritbox, /* Orghast */ \
	GhostConst$evidence$owometer|GhostConst$evidence$temps|GhostConst$evidence$hots /* Jim */ \
]
// Gets the FULL bitwise array, including nightmare mode forced types
#define getFullEvidenceTypes( ghostType ) \
	l2i(GhostConst$evidenceTypes, ghostType)
// Use with the value above to get the three evidence types from the int returned by getFullEvidenceTypes
#define getDefaultEvidenceTypes( arr ) \
	(arr&0xFFFF)
// Similar to above, but returns the forced evidence types for above
#define getForcedEvidenceTypes( arr ) \
	((arr>>16)&0xFFFF)




#define LevelCustomType$GHOST "oGhost"				// Generic type for traps like the lasher
	#define LevelCustomEvt$GHOST$spawned 1			// void - The ghost has been spawned
	#define LevelCustomEvt$GHOST$caught 2			// key player - The ghost has caught a player
	#define LevelCustomEvt$GHOST$arouse 3			// arr players, float points - Adds arousal to players
	#define LevelCustomEvt$GHOST$vaped 4			// void - The ghost was successfully vaped

#define onLevelCustomGhostSpawned( ghost ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOST AND argInt(2) == LevelCustomEvt$GHOST$spawned ){ \
		key ghost = argKey(0);
#define onLevelCustomGhostCaught(ghost, player) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOST AND argInt(2) == LevelCustomEvt$GHOST$caught ){ \
		key ghost = argKey(0); \
		key player = argKey(3);
#define onLevelCustomGhostArouse( ghost, players, points ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOST AND argInt(2) == LevelCustomEvt$GHOST$arouse ){ \
		key ghost = argKey(0); \
		list players = llJson2List(argStr(3)); \
		float points = argFloat(4);
#define onLevelCustomGhostVaped() \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOST AND argInt(2) == LevelCustomEvt$GHOST$vaped ){


#define Ghost$followNodes( nodes ) \
	runOmniMethod("Ghost", GhostMethod$followNodes, nodes)
#define Ghost$stop( stop, verbose ) \
	runOmniMethod("Ghost", GhostMethod$stop, stop + verbose)
#define Ghost$start() \
	runOmniMethod("Ghost", GhostMethod$stop, [])
#define Ghost$toggleHunt( on ) \
	runOmniMethod("Ghost", GhostMethod$toggleHunt, on)
#define Ghost$setType( type, evidence, difficulty, affixes ) \
	runOmniMethod("Ghost", GhostMethod$setType, (type) + (evidence) + (difficulty) + (affixes))
#define Ghost$incorrect() \
	runOmniMethod("Ghost", GhostMethod$incorrect, [])
#define Ghost$smudge( player, force ) \
	runOmniMethod("Ghost", GhostMethod$smudge, (player) + (force))
#define Ghost$interact() \
	runOmniMethod("Ghost", GhostMethod$interact, [])
#define Ghost$sendToChair( chair, hud, temp ) \
	runOmniMethod("Ghost", GhostMethod$sendToChair, chair + hud + temp)
#define Ghost$succubusPower() \
	runMethod(LINK_THIS, "Ghost", GhostMethod$succubusPower, [])


	

#endif
