/*
	
	This is an auxillary script that helps the ghost interacting with things

*/
#ifndef __GhostInteractions
#define __GhostInteractions

#define GhostInteractionsMethod$interact 1		// int maxItems=1 - Trigger an interaction in your local area
#define GhostInteractionsMethod$playSoundOnMe 2		// (float)vol - Callback for when the ghost sends ToolSet$trigger with parabolic
#define GhostInteractionsMethod$objectTouched 3		// (key)door - Used primarily by Ghost when it opens a door while walking
#define GhostInteractionsMethod$forcePower 4		// void - Debugs the ghost power

#define GhostInteractions$interact( maxItems ) \
	runOmniMethod("GhostInteractions", GhostInteractionsMethod$interact, maxItems)
#define GhostInteractions$playSoundOnMe( targ, vol ) \
	runMethod(targ, "GhostInteractions", GhostInteractionsMethod$playSoundOnMe, vol)
#define GhostInteractions$objectTouched( obj ) \
	runMethod(LINK_THIS, "GhostInteractions", GhostInteractionsMethod$objectTouched, obj)


// Level events
#define LevelCustomType$GHOSTINT "oGhostInt"
	#define LevelCustomEvt$GHOSTINT$interacted 1		// (key)id, (int)powerful - Ghost has interacted with something. May wanna give an EMF reading etc.
	#define LevelCustomEvt$GHOSTINT$power 2				// args based on ghost type - Ghost has used its power (if it has one).
	
#define onGhostInteraction( ghost, asset, power ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOSTINT AND argInt(2) == LevelCustomEvt$GHOSTINT$interacted ){ \
		key ghost = argKey(0); \
		key asset = argStr(3); \
		int power = argInt(4);
#define onGhostPower( ghost, args ) \
	if( isEventLevelCustom() AND argStr(1) == LevelCustomType$GHOSTINT AND argInt(2) == LevelCustomEvt$GHOSTINT$power ){ \
		key ghost = argKey(0); \
		list args = llDeleteSubList(METHOD_ARGS, 0, 2);
		



#endif
