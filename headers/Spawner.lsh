#ifndef __Spawner
#define __Spawner

#define SpawnerMethod$reset 0				// Resets the script
#define SpawnerMethod$callbackRepoEnum 1	// asset1, asset2... - Handles callback from Repo which lists what objects it can hand out
#define SpawnerMethod$callbackRepoFetch 2	// void - All requested items have been delivered
#define SpawnerMethod$callbackPortalSave 3	// void - Saves the selected portal item


#define SpawnerMethod$load 10				// (str)callback, (bool)live, (str)group1, group2... - Loads one or more groups of objects. Callback is raised as an event in the linkset. Use JSON_INVALID if you don't want an event
#define SpawnerMethod$listSpawns 11			// Outputs an indexed list of spawns
#define SpawnerMethod$purge 12				// Purges all spawns
#define SpawnerMethod$delete 13				// (int)index
#define SpawnerMethod$add 14				// void - Adds said object, use $ notation to save description
#define SpawnerMethod$savePortals 15		// (str)batch - Adds all spawned portals to the DB
#define SpawnerMethod$setSpawnValue 16		// (int)spawnIndex, (int)paramIndex, (var)value - Updates a spawn value
#define SpawnerMethod$spawnByIndex 17		// (int)live, (int)index1, index2... - Spawns one or many items by index
#define SpawnerMethod$fetchFromHud 18		// void - Fetches new assets from HUD
#define SpawnerMethod$getGroups 19			// (str)callback, group1, group2... - Raises the getGroups event with [(jsonArray)spawn1, spawn2...] Each spawn has the index appended to the end


#define SpawnerConst$CB_GAME_START "_G_"


#define SpawnerEvt$loadStart 1				// (str)callback, (bool)live, (str)group1, (str)group2... - A group of spawns has started. Use RezzerEvt$cb for detecting when the group is done.
#define SpawnerEvt$getGroups 2				// (str)callback, data...

#define Spawner$add( targ ) \
	runMethod(targ, "Spawner", SpawnerMethod$add, [])

#define Spawner$spawnByIndex( targ, index ) \
	runMethod(targ, "Spawner", SpawnerMethod$spawnByIndex, true + index)

#define Spawner$load( targ, groups, live, callback ) \
	runMethod(targ, "Spawner", SpawnerMethod$load, callback +live + groups)

#define Spawner$spawnGame() \
	Spawner$load( LINK_THIS, "", TRUE, SpawnerConst$CB_GAME_START )

#define Spawner$getGroups( callback, groups ) \
	runMethod(LINK_THIS, "Spawner", SpawnerMethod$getGroups, callback + groups)

#define Spawner$fetchFromHud( targ ) \
	runMethod(targ, "Spawner", SpawnerMethod$fetchFromHud, [])


#define onSpawnerLoadStart( cb, live, groups ) \
	if( SENDER_SCRIPT IS "Spawner" AND EVENT_TYPE IS SpawnerEvt$loadStart ){ \
		str cb = argStr(0); \
		bool live = argInt(1); \
		list groups = llDeleteSubList(METHOD_ARGS, 0, 1);
		
#define onSpawnerGameLoad() \
	if( SENDER_SCRIPT IS "Spawner" AND EVENT_TYPE IS SpawnerEvt$loadStart AND ~llListFindList(llDeleteSubList(METHOD_ARGS, 0, 1), (list)"") ){

#define onSpawnerGetGroups( callback, spawns ) \
	if( SENDER_SCRIPT IS "Spawner" AND EVENT_TYPE IS SpawnerEvt$getGroups ){ \
		string callback = l2s(METHOD_ARGS, 0); \
		list spawns = llDeleteSubList(METHOD_ARGS, 0, 0);
		

#endif
