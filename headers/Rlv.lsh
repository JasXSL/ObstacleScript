/*
	Handles the following:
	- Stripping
	- Windlight (and windlight steps)
	- Sprint
	- Supportcube
*/
#ifndef __RLV
#define __RLV


// Flags
#define RlvFlags$IMMOBILE 0x1			// Unable to move. Todo: Currently this only affects climbing


#define RlvConst$DESC$sex 0				// Sex flags from the JasX HUD
#define RlvConst$DESC$clothes 1			// 2-bit array, little endian. 0 = naked, 1 = underwear, 2 = dressed. Corresponds to RlvConst$SLOTS	

#define Rlv$getDesc$sex( hud ) \
	l2i(split(prDesc(hud), "$"), RlvConst$DESC$sex)
#define Rlv$getDesc$clothes( hud ) \
	l2i(split(prDesc(hud), "$"), RlvConst$DESC$clothes)

#define GENITALS_PENIS 0x1
#define GENITALS_VAGINA 0x2
#define GENITALS_BREASTS 0x4



// STATE
#define RlvConst$DRESSED 3
#define RlvConst$UNDERWEAR 2
#define RlvConst$BITS 1
#define RlvConst$IGNORE 0

// Translation for the JasX HUD
#define RlvConst$STATE [ \
	"Bits", \
	"Underwear", \
	"Dressed" \
]

// SLOT
#define RlvConst$HEAD 0
#define RlvConst$ARMS 1
#define RlvConst$TORSO 2
#define RlvConst$CROTCH 3
#define RlvConst$FEET 4

#define RlvConst$SLOTS [ \
	"Head", \
	"Arms", \
	"Torso", \
	"Crotch", \
	"Boots" \
]

// Sets clothes in 
#define RlvMethod$setClothes 1			// 5x 2-bit array, little endian. Rlv$SLOT indicates the index. and Rlv$STATE indicates the state to set it to. Add 1 to this. So 3 = dressed, 2 = underwear, 1 = bits, 0 = ignore
#define RlvMethod$setWindlight 2		// (str)windlight preset. Use "" to clear

#define RlvMethod$cubeTask 3			// task1, task2... Sends a task to the RLV supportcube
#define RlvMethod$unSit 4				// (int)force - Unsits the player
#define RlvMethod$cubeFlush 5			// Sends all pending cubetasks
#define RlvMethod$sit 6					// (key)id, (bool)blockUnsit

#define RlvMethod$setMaxSprint 7		// (float)duration - Sets sprint max duration in seconds. 0 disables running, -1 sets infinite sprint
#define RlvMethod$damageSprint 8		// (float)percent

#define RlvMethod$setFlags 9			// (int)flags 
#define RlvMethod$unsetFlags 10			// (int)flags

#define RlvMethod$target 11				// (vec)pos=targetPos, (float)speed, (float)duration - Uses llMoveToTarget on a player. Pos is the position of the target. Speed is the llMoveToTarget speed, and duration is how long to keep it.

#define RlvMethod$exitMouselook 12		// inverse, always - kicks the player out of mouselook. If inverse is true, it instead forces mouselook. Always forces this mode until the next call.

#define RlvMethod$triggerSound 13		// (key)sound, (float)vol, (key)playerThatCanHear - Triggers a sound. If playerThatCanHear is 1, it uses llPlaySound and stops loopSound
#define RlvMethod$loopSound 14			// (key)sound, (float)vol
#define RlvMethod$setCamMaxDist 15		// (float)dist - Sets camera max distance, a value below 0 resets
#define RlvMethod$disableChatLevels 16	// (int)chats_to_disable - Disables various chat volumes. See below.
	#define RlvConst$dcl$whisper 0x1
	#define RlvConst$dcl$normal 0x2
	#define RlvConst$dcl$shout 0x4
	#define RlvConst$dcl$all 0x8		// uses sendchat, but allows emotes and gestures
	#define RlvConst$dcl$recAll 0x10	// Disables receiving chat
	#define RlvConst$dcl$gesture 0x20	// Disables Sending gestures
	#define RlvConst$dcl$emote 0x40		// Disables Sending emotes
	
	
#define RlvMethod$toggleFreeCam 17		// (bool)allow - Enables or disables free look
#define RlvMethod$toggleFlying 18		// (bool)allow - Enables or disables flying

#define RlvMethod$setCamera 19			// (vec)pos, (rot)rotation, (bool)allowUnlock, (bool)filmGrain - Sets the camera and ejects from mouselook. If allowUnlock is true, it lets the user clear the camera by hitting e




#define RlvEvt$supportCubeSpawn 1		// (key)cube_id
#define RlvEvt$flags 2					// (int)flags



#define Rlv$setClothes( target, head, arms, torso, crotch, feet ) \
	runMethod( target, "Rlv", RlvMethod$setClothes, ( \
		(head)| \
		((arms)<<2)| \
		((torso)<<4)| \
		((crotch)<<6)| \
		((feet)<<8) \
	))
	
#define Rlv$setCamera(target, pos, rot, allowUnlock, grain ) \
	runMethod(target, "Rlv", RlvMethod$setCamera, pos + rot + allowUnlock + grain)
#define Rlv$clearCamera(target) \
	runMethod(target, "Rlv", RlvMethod$setCamera, [])

#define Rlv$setClothSlot( target, slot, state ) \
	runMethod( target, "Rlv", RlvMethod$setClothes, (state<<(slot*2)))

#define Rlv$disableChatLevels( target, levels ) \
	runMethod( target, "Rlv", RlvMethod$disableChatLevels, (levels) )

#define Rlv$toggleFreeCam( target, enable ) \
	runMethod( target, "Rlv", RlvMethod$toggleFreeCam, (enable) )

#define Rlv$toggleFlying( target, enable ) \
	runMethod( target, "Rlv", RlvMethod$toggleFlying, (enable) )

#define Rlv$triggerSound( target, sound, vol ) \
	runMethod( target, "Rlv", RlvMethod$triggerSound, sound + vol)

#define Rlv$playSound( target, sound, vol ) \
	runMethod( target, "Rlv", RlvMethod$triggerSound, sound + vol + 1)

// Plays a sound from target that only (key)listener can hear
#define Rlv$triggerSoundOn( target, sound, vol, listener ) \
	runMethod( target, "Rlv", RlvMethod$triggerSound, sound + vol + listener)

#define Rlv$loopSoundOn( target, sound, vol ) \
	runMethod( target, "Rlv", RlvMethod$loopSound, sound + (vol))
#define Rlv$stopLoopSound( target ) \
	Rlv$loopSoundOn( target, "", 0 ) \


#define Rlv$setCamMaxDist( target, dist ) \
	runMethod( target, "Rlv", RlvMethod$setCamMaxDist, dist)
	
	
#define Rlv$cubeTask( target, tasks ) \
	runMethod( target, "Rlv", RlvMethod$cubeTask, tasks)
	
#define Rlv$unSit( target, force ) \
	runMethod( target, "Rlv", RlvMethod$unSit, force )
	

#define Rlv$setWindlight( target, preset ) \
	runMethod( target, "Rlv", RlvMethod$setWindlight, preset )

#define Rlv$sit( target, seat, blockUnsit ) \
	runMethod( target, "Rlv", RlvMethod$sit, seat + blockUnsit )


#define Rlv$setMaxSprint( target, dur ) \
	runMethod( target, "Rlv", RlvMethod$setMaxSprint, dur )
#define Rlv$damageSprint( target, perc ) \
	runMethod( target, "Rlv", RlvMethod$damageSprint, perc )


#define Rlv$teleportPlayer( target, pos, rot ) \
	runMethod( target, "Rlv", RlvMethod$cubeTask, SupportCubeBuildTeleport(pos, rot))
#define Rlv$teleportPlayerNoUnsit( target, pos, rot ) \
	runMethod( target, "Rlv", RlvMethod$cubeTask, SupportCubeBuildTeleportNoUnsit(pos, rot))

#define Rlv$setFlags( target, flags, important ) \
	runMethod( target, "Rlv", RlvMethod$setFlags, ((int)flags) + ((int)important) )
#define Rlv$unsetFlags( target, flags, important ) \
	runMethod( target, "Rlv", RlvMethod$unsetFlags, ((int)flags) + ((int)important) )

#define Rlv$target( target, pos, speed, duration ) \
	runMethod( target, "Rlv", RlvMethod$target, (pos) + (speed) + (duration) )

#define Rlv$exitMouselook( target ) \
	runMethod( target, "Rlv", RlvMethod$exitMouselook, [] )
#define Rlv$enforceMouselook( target ) \
	runMethod( target, "Rlv", RlvMethod$exitMouselook, 1 + 1 )







#define onRlvSupportCubeSpawn( id ) \
	if( SENDER_SCRIPT IS "Rlv" AND EVENT_TYPE IS RlvEvt$supportCubeSpawn ){ \
		key id = argKey(0);
		
#define onRlvFlags( flags ) \
	if( SENDER_SCRIPT IS "Rlv" AND EVENT_TYPE IS RlvEvt$flags ){ \
		int flags = argInt(0);



#endif
