/*
	Nodes maintains pathing nodes for navigation
	!! Use #Nodes for the script name !!
*/
#ifndef __Nodes
#define __Nodes


#define NodesMethod$getRooms 1			// (str)senderScript, (int)callbackMethod - Causes the callback method to run with each slice of a room marker, prepended with the index in the array. Ex: [index, roomIndex, pos, rot, scale]. pos is converted to global coordinates when running this
#define NodesMethod$getPath 2			// (str)senderScript, (int)callbackMethod, (vec)startPos, (str/vec)endRoom - Select an end room by LABEL or POS
#define NodesMethod$getTemp 3			// (vec)pos, (key)targ, (str)script, (int)method - Sends method to script on targ with the arg being temperature in celsius
#define NodesMethod$getRoomName 4		// (str)cbString, (vec)pos, (str)senderScript, (int)callbackMethod - Callbacks callbackMethod with [cbString, roomLabel, roomName] of pos or no args if not found
#define NodesMethod$getPlumbedRoom 5	// (str)cbString, (str)senderScript, (int)callbackMethod - Callbacks callbackMethod with [cbString, roomPos] of a room with plumbing
#define NodesMethod$popLight 6			// (str)readable - Sets so a light can't be turned on
/*
#define NodesEvt$ghostData 1		// (int)flags, (int)nr_players_in_ghost_room - Raised every 4 sec with some metadata about the ghost. nr_players_in_ghost_room = number players in the current room of the ghost
	#define NodesEvt$ghostData$roomLightOn 0x1
*/
#define NodesEvt$ouija 2				// (key)player, (str)type, (str)room - Raised on successful ouija to be handled by #AUX

#define Nodes$getRooms( cbMethod ) \
	runOmniMethod( "#Nodes", NodesMethod$getRooms, llGetScriptName() + cbMethod )
#define Nodes$getPath( cbMethod, startPos, endRoom ) \
	runOmniMethod( "#Nodes", NodesMethod$getPath, llGetScriptName() + cbMethod + startPos + endRoom )
#define Nodes$getTemp( pos, cbTarg, cbScript, cbMethod ) \
	runOmniMethod( "#Nodes", NodesMethod$getTemp, pos + cbTarg + cbScript + cbMethod )
#define Nodes$getTempQuick( cbMethod ) \
	runOmniMethod( "#Nodes", NodesMethod$getTemp, llGetPos() + llGetKey() + llGetScriptName() + cbMethod )
#define Nodes$getRoomName( targ, cbString, pos, cbMethod ) \
	runMethod( targ, "#Nodes", NodesMethod$getRoomName, (cbString) + (pos) + llGetScriptName() + cbMethod )
#define Nodes$getPlumbedRoom( cbString, cbMethod ) \
	runOmniMethod( "#Nodes", NodesMethod$getPlumbedRoom, cbString + llGetScriptName() + cbMethod )
#define Nodes$popLight( readable ) \
	runMethod( LINK_THIS, "#Nodes", NodesMethod$popLight, readable )


//#define NodesEvt$sweatyTemps 1		// (key)player - Sweaty temps has triggered on a player

#define NodesConst$rmStride 4		// Since the roomMarkers is shared with getRooms, stride is a const here
#define NodesConst$defaultRmSlice \
	(list)0 + ZERO_VECTOR + ZERO_ROTATION + ZERO_VECTOR			// Needs to be a prototype for what's stored in the room marker list

// ouija used event
#define onGhostNodesOuija( player, type, roomName ) \
	if( SENDER_SCRIPT IS "#Nodes" AND EVENT_TYPE IS NodesEvt$ouija ){ \
		key player = argKey(0); \
		str type = argStr(1); \
		str roomName = argStr(2);


/*
#define onNodesSweatyTemps( player ) \
	if( SENDER_SCRIPT IS "#Nodes" AND EVENT_TYPE IS NodesEvt$sweatyTemps ){ \
		key player = argKey(0);
*/

// Helper macro that can be put in your method handler for getRooms to automatically populate a global list with the args
#define Nodes$handleGetRooms( globalVar ) \
	integer pos = argInt(0); \
	while( count(globalVar) < pos+NodesConst$rmStride ) \
		globalVar += NodesConst$defaultRmSlice; \
	globalVar = llListReplaceList(globalVar, (list) \
		argInt(1) + \
		argVec(2) + \
		argRot(3) + \
		argVec(4) \
	, pos, pos+3)


#endif
